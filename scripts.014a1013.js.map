{"version":3,"sources":["../scripts/graphics.ts","../scripts/constants.ts","../scripts/vector.ts","../scripts/vertex.ts","../scripts/line.ts","../scripts/polygon.ts","../scripts/force.ts","../scripts/sat.ts","../scripts/world.ts","../scripts/body.ts","../scripts/index.ts"],"names":[],"mappings":"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","file":"scripts.014a1013.js","sourceRoot":"dev","sourcesContent":["import {Polygon} from './polygon';\r\nimport {Vertex} from './vertex';\r\nimport {Line} from './line';\r\nimport { Force } from './force';\r\n\r\nvar ctx: CanvasRenderingContext2D = null\r\n\r\ninterface Options {\r\n    strokeStyle?: string;\r\n    lineWidth?: number;\r\n    fillStyle?: string;\r\n    radius?: number;\r\n    debug?: boolean;\r\n}\r\n\r\nexport function initialize(canvas: CanvasRenderingContext2D) {\r\n    ctx = canvas;\r\n}\r\n\r\nexport function draw_polygon(poly: Polygon, opts?: Options) {\r\n    opts = opts || {};\r\n\r\n    ctx.fillStyle = opts.fillStyle || 'slategrey';\r\n    ctx.strokeStyle = opts.strokeStyle || 'black';\r\n    ctx.lineWidth = opts.lineWidth || 1;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(poly.points[0].x, poly.points[0].y);\r\n    for (let pt of poly.points) {\r\n        ctx.lineTo(pt.x, pt.y);\r\n    }\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    if (opts.debug) {\r\n        ctx.strokeStyle = 'red';\r\n        ctx.lineWidth = 1;\r\n\r\n        if (poly.normals) {\r\n            for (let i of poly.normals) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(i.point.x, i.point.y);\r\n                ctx.lineTo(i.point.x + i.normal.x * 10, i.point.y + i.normal.y * 10);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n        draw_point(poly.centroid);\r\n    }\r\n}\r\n\r\nexport function draw_polygons(polys: Polygon[], opts?: Options) {\r\n    for (let x of polys) {\r\n        draw_polygon(x, opts);\r\n    }\r\n}\r\n\r\nexport function draw_point(pt: Vertex, opts?: Options) {\r\n    if (!pt) { return }; //Skip if no point\r\n    opts = opts || {};\r\n\r\n    ctx.fillStyle = opts.fillStyle || 'red';\r\n    let radius = opts.radius || 3;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(pt.x, pt.y, radius, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n}\r\n\r\nexport function draw_points(pts: Vertex[], opts?: Options) {\r\n    if (!pts) { return };\r\n    for (let x of pts) {\r\n        draw_point(x, opts);\r\n    }\r\n}\r\n\r\nexport function draw_line(line: Line, opts?: Options) {\r\n    if (!line) { return };\r\n    opts = opts || {};\r\n\r\n    ctx.strokeStyle = opts.strokeStyle || 'black';\r\n    ctx.lineWidth = opts.lineWidth || 3;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(line.v1.x, line.v1.y);\r\n    ctx.lineTo(line.v2.x, line.v2.y);\r\n    ctx.stroke();\r\n}\r\n\r\nexport function draw_lines(lines: Line[], opts?: Options) {\r\n    if (!lines) { return };\r\n    for (let x of lines) {\r\n        draw_line(x, opts);\r\n    }\r\n}\r\n\r\nexport function draw_force(force: Force, opts?: Options) {\r\n    if (!force) { return };\r\n    opts = opts || {};\r\n\r\n    ctx.strokeStyle = opts.strokeStyle || 'blue';\r\n    ctx.lineWidth = opts.lineWidth || 1;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(force.location.x, force.location.y);\r\n    let scaled_x = Math.log(force.force.x) * 2;\r\n    if (scaled_x === -Infinity || scaled_x === Infinity) {\r\n        scaled_x = 0;\r\n    } else if (isNaN(scaled_x)) {\r\n        scaled_x = Math.log(-1 * force.force.x) * -2;\r\n    }\r\n\r\n    let scaled_y = Math.log(force.force.y) * 2;\r\n    if (scaled_y === -Infinity || scaled_y === Infinity) {\r\n        scaled_y = 0;\r\n    } else if (isNaN(scaled_y)) {\r\n        scaled_y = Math.log(-1 * force.force.y) * -2;\r\n    }\r\n    ctx.lineTo(force.location.x + scaled_x, force.location.y + scaled_y);\r\n    ctx.stroke();\r\n    draw_point(force.location, {radius: 1, fillStyle: 'black'})\r\n} ","export const toRad: number = (Math.PI / 180);\r\nexport const toDeg: number = (180 / Math.PI);\r\n\r\nexport interface Projection {\r\n    min: number;\r\n    max: number;\r\n    min_index: number;\r\n    max_index: number;\r\n}","import {toRad, toDeg} from './constants';\r\n\r\n\r\nexport class Vector {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(other: Vector): Vector {\r\n        return new Vector(this.x + other.x, this.y + other.y);\r\n    }\r\n\r\n    scale(value: number): Vector {\r\n        return new Vector(this.x * value, this.y * value);\r\n    }\r\n\r\n    dot(other: Vector): number {\r\n        return this.x * other.x + other.y * this.y;\r\n    }\r\n\r\n    cross(other: Vector): number {\r\n        return this.x * other.y - other.x * this.y;\r\n    }\r\n\r\n    normalize(): Vector {\r\n        let len = this.len();\r\n        return new Vector(this.x / len, this.y / len);\r\n    }\r\n\r\n    lenSq(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    len(): number {\r\n        return Math.sqrt(this.lenSq());\r\n    }\r\n\r\n    angle(): number {\r\n        return Math.atan2(this.y, this.x) * toDeg;\r\n    }\r\n\r\n    rotate(angle: number) {\r\n        angle = toRad * angle;\r\n\r\n        this.x = Math.cos(angle) * this.x - Math.sin(angle) * this.y;\r\n        this.y = Math.sin(angle) * this.x + Math.cos(angle) * this.y; \r\n    }\r\n\r\n}","import {Vector} from './vector';\r\nimport {Line} from './line';\r\nimport {toRad, toDeg} from './constants';\r\n\r\n\r\nexport class Vertex {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    dot(other: Vector): number {\r\n        return this.x * other.x + other.y * this.y;\r\n    }\r\n\r\n    cross(other: Vector): number {\r\n        return this.x * other.y - other.x * this.y;\r\n    }\r\n\r\n    scale(value: number) {\r\n        this.x = this.x * value;\r\n        this.y = this.y * value;\r\n    }\r\n\r\n    distToSq(other: Vertex): number {\r\n        return (other.x - this.x) * (other.x - this.x) + (other.y - this.y) * (other.y - this.y);\r\n    }\r\n\r\n    distTo(other: Vertex): number {\r\n        return Math.sqrt(this.distToSq(other));\r\n    }\r\n\r\n    angleTo(other: Vertex): number {\r\n        return Math.atan2(other.y - this.y, other.x - this.x) * toDeg;\r\n    }\r\n\r\n    vectorTo(other: Vertex): Vector {\r\n        return new Vector(other.x - this.x, other.y - this.y);\r\n    }\r\n\r\n    rotate(angle: number, center?: Vertex) {\r\n        center = center || new Vertex(0, 0);\r\n        angle = angle * toRad; //Convert angle to radians\r\n\r\n        let new_x = Math.cos(angle) * (this.x - center.x) - Math.sin(angle) * (this.y - center.y) + center.x;\r\n        let new_y = Math.sin(angle) * (this.x - center.x) + Math.cos(angle) * (this.y - center.y) + center.y;\r\n\r\n        this.x = new_x;\r\n        this.y = new_y;\r\n    }\r\n\r\n    translate(x: number | Vector, y?: number) {\r\n        if (x instanceof Vector) {\r\n            this.x = this.x + x.x;\r\n            this.y = this.y + x.y;\r\n        } else {\r\n            this.x = this.x + x;\r\n            this.y = (y) ? this.y + y : this.y;\r\n        }\r\n    }\r\n\r\n    isAbove(other: Line): boolean {\r\n        if (other.mid().vectorTo(this).dot(other.normal()) > 1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    areColinear(other1: Vertex, other2: Vertex): boolean {\r\n        let a = this.x * (other1.y - other2.y) + other1.x * (other2.y - this.y) + other2.x * (this.y - other1.y);\r\n        return (a < 0.2);\r\n    }\r\n\r\n    equals(other: Vertex, tol: number = 0): boolean {\r\n        if (Math.abs(this.x - other.x) <= tol && \r\n            Math.abs(this.y - other.y) <= tol) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}","import { Vertex } from './vertex';\r\nimport { Vector } from './vector';\r\n\r\n\r\nexport class Line {\r\n    v1: Vertex;\r\n    v2: Vertex;\r\n\r\n    constructor(v1: Vertex, v2: Vertex) {\r\n        this.v1 = v1;\r\n        this.v2 = v2;\r\n    }\r\n\r\n    normal(): Vector {\r\n        return new Vector(-1 * (this.v2.y - this.v1.y), this.v2.x - this.v1.x)\r\n    }\r\n\r\n    mid(): Vertex {\r\n        return new Vertex(0.5 * (this.v2.x + this.v1.x), 0.5 * (this.v2.y + this.v1.y));\r\n    }\r\n\r\n    lenSq(): number {\r\n        return this.v1.distToSq(this.v2);\r\n    }\r\n\r\n    len(): number {\r\n        return Math.sqrt(this.lenSq());\r\n    }\r\n\r\n    angle(): number {\r\n        return this.v1.angleTo(this.v2);\r\n    }\r\n\r\n    rotate(angle: number, center?: Vertex) {\r\n        center = center || this.mid();\r\n\r\n        this.v1.rotate(angle, center);\r\n        this.v2.rotate(angle, center);\r\n    }\r\n\r\n    translate(x: number | Vector, y?: number) {\r\n        this.v1.translate(x, y);\r\n        this.v2.translate(x, y);\r\n    }\r\n\r\n    intersect(other: Line): Vertex {\r\n        let bot = (other.v2.x - other.v1.x) * (this.v1.y - this.v2.y) - (this.v1.x - this.v2.x) * (other.v2.y - other.v1.y);\r\n        if (bot === 0) {\r\n            return null;\r\n        }\r\n\r\n        let ta = ((other.v1.y - other.v2.y) * (this.v1.x - other.v1.x) + (other.v2.x - other.v1.x) * (this.v1.y - other.v1.y)) / bot;\r\n        let tb = ((this.v1.y - this.v2.y) * (this.v1.x - other.v1.x) + (this.v2.x - this.v1.x) * (this.v1.y - other.v1.y)) / bot;\r\n\r\n        if (0 <= ta && ta <= 1 && 0 <= tb && tb <= 1) {\r\n            return new Vertex(this.v1.x + ta * (this.v2.x - this.v1.x), this.v1.y + ta * (this.v2.y - this.v1.y));\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}","import { Vertex } from \"./vertex\";\r\nimport { Vector } from \"./vector\";\r\nimport { Line } from \"./line\";\r\nimport {Projection} from './constants';\r\n\r\ninterface Normal {\r\n    point: Vertex;\r\n    normal: Vector;\r\n}\r\n\r\nexport class Polygon {\r\n    points: Vertex[];\r\n    area: number = 0;\r\n    perimeter: number = 0;\r\n    Ix: number = 0;\r\n    Iy: number = 0;\r\n    Iz: number = 0;\r\n\r\n    centroid: Vertex = new Vertex(0, 0);\r\n    normals: Normal[];\r\n\r\n    //TODO: Add toggle to disable init\r\n    constructor(points: Vertex[], init: boolean = true) {\r\n        if (points[points.length - 1].equals(points[0])) {\r\n            points.pop();\r\n        }\r\n        this.points = points;\r\n\r\n        if (init) {\r\n            this._initLight();\r\n            this.update();\r\n            if (this.area < 0) {\r\n                console.error('Polygon must be defined counterclockwise');\r\n            }\r\n            this.init();\r\n        } else {\r\n            this._initLight();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * One time function for fixed values (area, perimeter and moment of inertia)\r\n     */\r\n    init() {\r\n        this.area = 0;\r\n        this.perimeter = 0;\r\n\r\n        this.Ix = 0;\r\n        this.Iy = 0;\r\n        this.Iz = 0;\r\n\r\n        let j = this.points.length - 1;\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            //Area\r\n            this.area += this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y;\r\n\r\n            //Perimeter\r\n            this.perimeter += this.points[j].distTo(this.points[i]);\r\n\r\n            //Second Moment, Ix and Iy\r\n            let p1 = this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y;\r\n            let py = this.points[j].x * this.points[j].x + this.points[j].x * this.points[i].x + this.points[i].x * this.points[i].x;\r\n            let px = this.points[j].y * this.points[j].y + this.points[j].y * this.points[i].y + this.points[i].y * this.points[i].y;\r\n            this.Ix += p1 * px;\r\n            this.Iy += p1 * py;\r\n\r\n            j = i;\r\n        }\r\n        this.area = -0.5 * this.area;\r\n\r\n        this.Ix = -(1 / 12) * this.Ix;\r\n        this.Iy = -(1 / 12) * this.Iy;\r\n\r\n        //Apply parallel axis theorem\r\n        this.Ix = this.Ix - this.area * (this.centroid.y * this.centroid.y);\r\n        this.Iy = this.Iy - this.area * (this.centroid.x * this.centroid.x);\r\n\r\n        //Calculate Iz\r\n        this.Iz = this.Ix + this.Iy;\r\n    }\r\n\r\n    /**\r\n     * Function to update centroid and normals\r\n     */\r\n    update() {\r\n        this.centroid.x = 0;\r\n        this.centroid.y = 0;\r\n\r\n        this.normals = [];\r\n\r\n        let j = this.points.length - 1;\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            //Centroid\r\n            this.centroid.x += (this.points[j].x + this.points[i].x) * (this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y);\r\n            this.centroid.y += (this.points[j].y + this.points[i].y) * (this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y);\r\n\r\n            //Normals\r\n            let dx = this.points[i].x - this.points[j].x;\r\n            let dy = this.points[i].y - this.points[j].y;\r\n            let vec = new Vector(-dy, dx).normalize();\r\n            this.normals.push({\r\n                point: new Vertex(0.5 * (this.points[j].x + this.points[i].x), 0.5 * (this.points[j].y + this.points[i].y)),\r\n                normal: vec\r\n            });\r\n\r\n            j = i;\r\n        }\r\n        let coef = -(1 / (6 * this.area));\r\n        this.centroid.x = coef * this.centroid.x;\r\n        this.centroid.y = coef * this.centroid.y;\r\n    }\r\n\r\n    translate(x: number | Vector, y?: number) {\r\n        for (let pt of this.points) {\r\n            pt.translate(x, y);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    rotate(angle: number, center?: Vertex) {\r\n        center = center || this.centroid;\r\n        for (let pt of this.points) {\r\n            pt.rotate(angle, center);\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    intersect(other: Line): Vertex[] {\r\n        let pts = [];\r\n        // Use each segment of the polygon to intersect with the line\r\n        let j = this.points.length - 1;\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            let int = other.intersect( new Line(new Vertex(this.points[j].x, this.points[j].y), new Vertex(this.points[i].x, this.points[i].y)) );\r\n\r\n            if (int) {\r\n                pts.push(int);\r\n            }\r\n            j = i;\r\n        }\r\n        return (pts.length > 0) ? pts : null;\r\n    }\r\n\r\n    divide(other: Line): Polygon {\r\n        let int = this.intersect(other);\r\n        if (!int) { return };\r\n\r\n        let sideFlag = this.points[0].isAbove(other);\r\n        let verts = [];\r\n\r\n        let j = this.points.length - 1;\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            let side = this.points[i].isAbove(other);\r\n            if (side === sideFlag) {\r\n                if (side) {\r\n                    verts.push( new Vertex(this.points[i].x, this.points[i].y) );\r\n                }\r\n            } else {\r\n                let div_pt = (this.points[i].areColinear(this.points[i - 1], int[0])) ? 0 : 1;\r\n                verts.push(int[div_pt]);\r\n                int.splice(div_pt, 1);\r\n                if (side) {\r\n                    verts.push( new Vertex(this.points[i].x, this.points[i].y) );\r\n                }\r\n                sideFlag = !sideFlag;\r\n            }\r\n        }\r\n        if (int.length > 0) {\r\n            verts.push(int[0]);\r\n        }\r\n        return new Polygon(verts, false);\r\n    }\r\n\r\n    project(axis: Vector): Projection {\r\n        let res = {min: Infinity, max: -Infinity, min_index: 0, max_index: 0};\r\n        for (let i=0; i < this.points.length; i++) {\r\n            let dot = this.points[i].dot(axis);\r\n\r\n            if (dot > res.max) {\r\n                res.max = dot;\r\n                res.max_index = i;\r\n            } \r\n            if (dot < res.min) {\r\n                res.min = dot;\r\n                res.min_index = i;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    containsPoint(pt: Vertex) {\r\n        let ray = new Line(pt, new Vertex(pt.x + 500, pt.y));\r\n        let int = this.intersect(ray);\r\n        if (!int) {return};\r\n        if (int.length % 2 === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _initLight() {\r\n        this.area = 0;\r\n        this.centroid.x = 0;\r\n        this.centroid.y = 0;\r\n        this.perimeter = 0;\r\n        let j = this.points.length - 1;\r\n        for (let i = 0; i < this.points.length; i++) {\r\n            //Area\r\n            this.area += this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y;\r\n            //Centroid\r\n            this.centroid.x += (this.points[j].x + this.points[i].x) * (this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y);\r\n            this.centroid.y += (this.points[j].y + this.points[i].y) * (this.points[j].x * this.points[i].y - this.points[i].x * this.points[j].y);\r\n            //Perimeter\r\n            this.perimeter += this.points[j].distTo(this.points[i]);\r\n\r\n            j = i;\r\n        }\r\n        this.area = -0.5 * this.area;\r\n        let coef = -(1 / (6 * this.area));\r\n        this.centroid.x = coef * this.centroid.x;\r\n        this.centroid.y = coef * this.centroid.y;\r\n    }\r\n}","import { Vector } from \"./vector\";\r\nimport { Vertex } from \"./vertex\";\r\n\r\n\r\nexport class Force{\r\n    force: Vector;\r\n    location: Vertex;\r\n\r\n    constructor(force: Vector, location: Vertex) {\r\n        this.force = force;\r\n        this.location = location;\r\n    }\r\n\r\n    momentAbout(other: Vertex): number {\r\n        let arm = other.vectorTo(this.location);\r\n        return arm.cross(this.force);\r\n    }\r\n}","import { Projection } from './constants';\r\nimport { Polygon } from './polygon';\r\nimport { Vector } from './vector';\r\nimport { Vertex } from './vertex';\r\n\r\ninterface Overlap {\r\n    overlap: number;\r\n    point_ind: number;\r\n}\r\n\r\ninterface Manifold {\r\n    normal: Vector;\r\n    distance: number;\r\n    point: Vertex;\r\n}\r\n\r\n/**\r\n * Check if two projections are overlapping on an axis.\r\n * @param proj1 Projection whos axis\r\n * @param proj2 Projection\r\n */\r\nexport function getOverlap(proj1: Projection, proj2: Projection): Overlap {\r\n    let ans = null;\r\n    if (proj1.min >= proj2.min && proj1.min <= proj2.max && proj1.max >= proj2.max) {\r\n        // ----x2--x1-----x2--x1----\r\n        ans = {\r\n            overlap: Math.abs(proj2.max - proj1.min),\r\n            point_ind: proj2.max_index\r\n        };\r\n    } else if (proj1.min <= proj2.min && proj1.max >= proj2.min && proj1.max <= proj2.max) {\r\n        // ----x1--x2-----x1--x2----\r\n        ans = {\r\n            overlap: Math.abs(proj1.max - proj2.min),\r\n            point_ind: proj2.min_index\r\n        };\r\n    } else if ((proj1.min < proj2.min && proj1.max > proj2.max) || (proj2.min < proj1.min && proj2.max > proj1.max)) {\r\n        ans = {\r\n            overlap: 9999,\r\n            point_ind: 0\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n\r\n/**\r\n * Check if two polygons are overlapping and get distance and axis on which they are.\r\n * Separating axis theorem. http://www.dyn4j.org/2010/01/sat/\r\n * @param v1 Polygon1\r\n * @param v2 Polygon2\r\n */\r\nexport function SAT(poly1: Polygon, poly2: Polygon): Manifold {\r\n    let min_overlap = Infinity;\r\n    let min_axis = null;\r\n    let point_ind = null;\r\n    let poly = null;\r\n\r\n    //Check normals of first polygon\r\n    for (let i = 0; i < poly1.normals.length; i ++) {\r\n        let axis = poly1.normals[i].normal;\r\n        let proj1 = poly1.project(axis);\r\n        let proj2 = poly2.project(axis);\r\n        let overlap = getOverlap(proj1, proj2);\r\n\r\n        if (!overlap) {\r\n            return\r\n        } else if (overlap.overlap < min_overlap) {\r\n            min_overlap = overlap.overlap;\r\n            min_axis = axis;\r\n            point_ind = overlap.point_ind;\r\n            poly = poly2;\r\n        }\r\n    }\r\n\r\n    //Check normals of second polygon\r\n    for (let i = 0; i < poly2.normals.length; i ++) {\r\n        let axis = poly2.normals[i].normal;\r\n        let proj1 = poly1.project(axis);\r\n        let proj2 = poly2.project(axis);\r\n        let overlap = getOverlap(proj2, proj1);\r\n\r\n        if (!overlap) {\r\n            return\r\n        } else if (overlap.overlap < min_overlap) {\r\n            min_overlap = overlap.overlap;\r\n            min_axis = axis;\r\n            point_ind = overlap.point_ind;\r\n            poly = poly1;\r\n        }\r\n    }\r\n\r\n    //Make axis always point to the first polygon\r\n    if ((poly1.centroid.x - poly2.centroid.x) * min_axis.x < 0 || (poly1.centroid.y - poly2.centroid.y) * min_axis.y < 0) {\r\n        min_axis.x = min_axis.x * -1;\r\n        min_axis.y = min_axis.y * -1;\r\n    }\r\n\r\n    let return_point = new Vertex(poly.points[point_ind].x, poly.points[point_ind].y);\r\n    return {distance: min_overlap, normal: min_axis, point: return_point};\r\n}\r\n","import { Line } from \"./line\";\r\nimport { Body } from \"./body\";\r\nimport { Force } from \"./force\";\r\nimport { Vector } from \"./vector\";\r\nimport { SAT } from \"./sat\";\r\n\r\n\r\nexport class World {\r\n    bodies: Map<string, Body>;\r\n    waterline?: Line;\r\n\r\n    constructor() {\r\n        this.bodies = new Map();\r\n        this.waterline = null;\r\n    }\r\n\r\n    update(dt: number) {\r\n        let gravity = new Vector(0, 9.81);\r\n        for (let body of this.bodies.values()) {\r\n\r\n            body.calculateBouyancy(this.waterline);\r\n            body.forces.set('gravity', new Force(gravity.scale(1 * body.mass), body.polygon.centroid));\r\n            body.update(dt);\r\n\r\n            for (let other of this.bodies.values()) {\r\n                if (body !== other) {\r\n                    collideAndResolve(body, other);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction collideAndResolve(b1: Body, b2: Body) {\r\n    let col = SAT(b1.polygon, b2.polygon);\r\n    if (!col) { return };\r\n\r\n    //CoM -> Point of Contact\r\n    let r1 = new Vector(col.point.x - b1.polygon.centroid.x, col.point.y - b1.polygon.centroid.y);\r\n    let r2 = new Vector(col.point.x - b2.polygon.centroid.x, col.point.y - b2.polygon.centroid.y);\r\n\r\n    //Velocity at contact points\r\n    let vp1 = new Vector(b1.velocity.x - b1.angular_velocity * r1.y, b1.velocity.y + b1.angular_velocity * r1.x);\r\n    let vp2 = new Vector(b2.velocity.x - b2.angular_velocity * r2.y, b2.velocity.y + b2.angular_velocity * r2.x);\r\n    \r\n    //RelAtoB\r\n    let rv = new Vector(vp2.x - vp1.x, vp2.y - vp1.y);\r\n    let velRel = rv.dot(col.normal);\r\n\r\n    //Rotational component - (r x n)^2 / Iz\r\n    let v1 = r1.cross(col.normal);\r\n    v1 = (v1 * v1) * b1.inv_inertia;\r\n    let v2 = r2.cross(col.normal);\r\n    v2 = (v2 * v2) * b2.inv_inertia;\r\n\r\n    let e = 0.01; //Restitution\r\n    let j = -(1 + e) * velRel;\r\n    j = j / (b1.inv_mass + b2.inv_mass + v1 + v2); //impulse\r\n\r\n    let impulse = new Vector(col.normal.x * j, col.normal.y * j);\r\n    b1.velocity = new Vector(b1.velocity.x - b1.inv_mass * impulse.x, b1.velocity.y - b1.inv_mass * impulse.y);\r\n    b2.velocity = new Vector(b2.velocity.x + b2.inv_mass * impulse.x, b2.velocity.y + b2.inv_mass * impulse.y);\r\n\r\n    b1.angular_velocity -= b1.inv_inertia * r1.cross(impulse);\r\n    b2.angular_velocity += b2.inv_inertia * r2.cross(impulse);\r\n\r\n    //Friction\r\n    let tangentVel = new Vector(rv.x - velRel * col.normal.x, rv.y - velRel * col.normal.y).normalize();\r\n\r\n    let f1 = r1.cross(tangentVel);\r\n    f1 = (f1 * f1) * b1.inv_inertia;\r\n    let f2 = r2.cross(tangentVel);\r\n    f2 = (f2 * f2) * b2.inv_inertia;\r\n    let k = -(1 + e) * rv.dot(tangentVel);\r\n    k = k / (b1.inv_mass + b2.inv_mass + v1 + v2);\r\n\r\n    let friction = new Vector(tangentVel.x * k, tangentVel.y * k);\r\n    b1.velocity = new Vector(b1.velocity.x - b1.inv_mass * friction.x, b1.velocity.y - b1.inv_mass * friction.y);\r\n    b2.velocity = new Vector(b2.velocity.x + b2.inv_mass * friction.x, b2.velocity.y + b2.inv_mass * friction.y);\r\n\r\n    b1.angular_velocity -= b1.inv_inertia * r1.cross(friction);\r\n    b2.angular_velocity += b2.inv_inertia * r2.cross(friction);\r\n\r\n\r\n\r\n    //Collision Resolution \r\n    const k_slop = 0.01;\r\n    const percent = 0.8;\r\n    let temp = Math.max(col.distance - k_slop, 0.0) / (b1.inv_mass + b2.inv_mass);\r\n    let correction = new Vector(col.normal.x * percent * temp, col.normal.y * percent * temp);\r\n\r\n    b1.polygon.translate(new Vector(1 * correction.x * b1.inv_mass, 1 * correction.y * b1.inv_mass));\r\n    b2.polygon.translate(new Vector(-1 * correction.x * b2.inv_mass, -1 * correction.y * b2.inv_mass));\r\n}\r\n\r\n","import { Polygon } from \"./polygon\";\r\nimport { Vector } from \"./vector\";\r\nimport { Force } from \"./force\";\r\nimport { toDeg } from \"./constants\";\r\nimport { Line } from \"./line\";\r\n\r\n\r\nexport class Body {\r\n    polygon: Polygon;\r\n    mass: number;\r\n    inv_mass: number;\r\n    inertia: number;\r\n    inv_inertia: number;\r\n    velocity: Vector;\r\n    acceleration: Vector;\r\n    angular_velocity: number;\r\n    angular_acceleration: number;\r\n    forces: Map<string, Force>;\r\n    moments: Map<string, number>;\r\n    kinematic: boolean;\r\n    trackingMouse: boolean;\r\n\r\n    constructor(poly: Polygon, mass?: number) {\r\n        this.polygon = poly;\r\n        this.mass = mass || this.polygon.area;\r\n        this.inv_mass = 1 / this.mass;\r\n        this.inertia = this.polygon.Iz * (this.mass / this.polygon.area);\r\n        this.inv_inertia = 1 / this.inertia;\r\n        this.velocity = new Vector(0, 0);\r\n        this.acceleration = new Vector(0, 0);\r\n        this.angular_velocity = 0;\r\n        this.angular_acceleration = 0;\r\n        this.forces = new Map();\r\n        this.moments = new Map();\r\n        this.kinematic = false;\r\n        this.trackingMouse = false;\r\n    }\r\n\r\n    update(dt: number) {\r\n        this.applyForces();\r\n        this.updateMovement(dt);\r\n    }\r\n\r\n    updateMovement(dt: number) {\r\n        this.velocity = new Vector(this.velocity.x + this.acceleration.x * dt, this.velocity.y + this.acceleration.y * dt);\r\n        this.polygon.translate(this.velocity.x * dt, this.velocity.y * dt);\r\n\r\n        this.angular_velocity += this.angular_acceleration * dt;\r\n        this.polygon.rotate(this.angular_velocity * dt * toDeg);\r\n    }\r\n\r\n    applyForces() {\r\n        this.acceleration.x = 0;\r\n        this.acceleration.y = 0;\r\n        this.angular_acceleration = 0;\r\n\r\n        if (this.kinematic) { return };\r\n\r\n        for (let value of this.forces.values()) {\r\n            this.angular_acceleration += value.momentAbout(this.polygon.centroid);\r\n            this.acceleration = this.acceleration.add(value.force);\r\n        }\r\n        for (let value of this.moments.values()) {\r\n            this.angular_acceleration += value;\r\n        }\r\n\r\n        this.acceleration = this.acceleration.scale(1 / this.mass);\r\n        this.angular_acceleration /= this.inertia;\r\n    }\r\n\r\n    calculateBouyancy(wl: Line) {\r\n        if (!wl) { return };\r\n        let submerged = this.polygon.divide(wl);\r\n        if (!submerged && this.polygon.centroid.isAbove(wl)) {\r\n            submerged = this.polygon;\r\n        } else if (!submerged) {\r\n            this.forces.delete('bouyancy');\r\n            this.forces.delete('drag');\r\n            this.moments.delete('drag');\r\n            return;\r\n        }\r\n\r\n        let center = submerged.centroid;\r\n        center.x = (Math.abs(center.x - this.polygon.centroid.x) > 0.01) ? center.x : this.polygon.centroid.x;\r\n        let force = new Vector(0, -1).scale(submerged.area * 1.025 * 9.81);\r\n        let bf = new Force(force, center);\r\n        this.forces.set('bouyancy', bf);\r\n\r\n        //Linear drag\r\n        let drag_dir = (this.velocity.y > 0) ? -1 : 1;\r\n        let drag_vector = new Vector(0, drag_dir).scale(0.5 * submerged.perimeter * 0.65 * 1.025 * (this.velocity.y * this.velocity.y));\r\n        let drag_force = new Force(drag_vector, this.polygon.centroid);\r\n        this.forces.set('drag', drag_force);\r\n        //Angular drag\r\n        let angular_drag = -0.45 * this.angular_velocity\r\n        this.moments.set('drag', angular_drag * this.inertia);\r\n    }\r\n}","import * as gfx from \"./graphics\";\r\nimport {Polygon} from './polygon';\r\nimport { Vertex } from \"./vertex\";\r\nimport { Line } from \"./line\";\r\nimport { World } from \"./world\";\r\nimport { Body } from \"./body\";\r\nimport { SAT } from './sat';\r\nimport { Vector } from \"./vector\";\r\n\r\n\r\nconst canvas = <HTMLCanvasElement> document.getElementById('canvas');\r\nconst ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n\r\ngfx.initialize(ctx); //Need to give gfx the handle to the Canvas\r\n\r\nlet pts = [new Vertex(0, 0), new Vertex(0, 50), new Vertex(150, 50), new Vertex(150, 0), new Vertex(100, 0), new Vertex(0, 0)];\r\nlet sq = new Polygon(pts);\r\nsq.translate(155, 220);\r\nsq.rotate(15);\r\nlet body = new Body(sq, 3500);\r\nbody.kinematic = false;\r\n\r\nlet pts2 = [new Vertex(0, 0), new Vertex(0, 25), new Vertex(50, 25), new Vertex(50, 0)];\r\nlet sq2 = new Polygon(pts2);\r\nsq2.translate(170, 130);\r\nlet body2 = new Body(sq2, 250);\r\nbody2.kinematic = false;\r\n\r\nlet pts3 = [new Vertex(0, 0), new Vertex(0, 25), new Vertex(50, 25), new Vertex(50, 0)];\r\nlet sq3 = new Polygon(pts3);\r\nsq3.translate(240, 100);\r\nlet body3 = new Body(sq3, 750);\r\n\r\nlet wl = new Line(new Vertex(0, 300), new Vertex(600, 300));\r\n\r\n\r\nlet world = new World();\r\nworld.bodies.set('1', body);\r\n//world.bodies.set('2', body2);\r\n//world.bodies.set('3', body3);\r\nworld.waterline = wl;\r\n\r\nfunction main() {\r\n    ctx.fillStyle = 'lightskyblue';\r\n    ctx.fillRect(0, 0, 600, 300);\r\n    ctx.fillStyle = 'navy';\r\n    ctx.fillRect(0, 300, 600, 200);\r\n\r\n    world.update(0.025);\r\n    gfx.draw_polygon(body.polygon, {debug: false});\r\n    //gfx.draw_polygon(body2.polygon);\r\n    //gfx.draw_polygon(body3.polygon);\r\n    gfx.draw_line(world.waterline, {strokeStyle: 'dodgerblue'});\r\n\r\n    window.requestAnimationFrame(main);\r\n}\r\nwindow.requestAnimationFrame(main);\r\n\r\n//Mouse Stuff\r\nfunction getMousePos(canvas: HTMLCanvasElement, evt: MouseEvent) {\r\n    var rect = canvas.getBoundingClientRect();\r\n    return new Vertex(evt.clientX - rect.left, evt.clientY - rect.top);\r\n}\r\n\r\ncanvas.addEventListener('mousedown', function(evt) {\r\n    let mousePos = getMousePos(canvas, evt);\r\n    for (let b of world.bodies.values()) {\r\n        if (b.polygon.containsPoint(mousePos)) {\r\n            b.trackingMouse = true;\r\n        }\r\n    }\r\n});\r\n\r\ncanvas.addEventListener('mouseup', function(evt) {\r\n    for (let b of world.bodies.values()) {\r\n        b.trackingMouse = false;\r\n    }\r\n});\r\n\r\ncanvas.addEventListener('mousemove', function(evt) {\r\n    for (let b of world.bodies.values()) {\r\n        if (b.trackingMouse) {\r\n            let mp = getMousePos(canvas, evt);\r\n            let dv = new Vector(2 * (mp.x - b.polygon.centroid.x), 2 * (mp.y - b.polygon.centroid.y));\r\n\r\n            b.velocity = dv;\r\n        }\r\n    }\r\n});\r\n"]}